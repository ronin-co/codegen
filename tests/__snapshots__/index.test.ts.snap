// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`generate a basic model 1`] = `
"import type { AddQuery, CountQuery, GetQuery, RemoveQuery, SetQuery } from "@ronin/compiler";
import type { DeepCallable, ResultRecord } from "@ronin/syntax/queries";
import type { QueryHandlerOptions } from "ronin/types";
declare module "ronin" {
    export type Account = ResultRecord & {
        email: string;
        name: string;
    };
    export type Accounts = Array<Account> & {
        moreBefore?: string;
        moreAfter?: string;
    };
    declare const get: {
        /* Get a single account record */
        account: DeepCallable<GetQuery[keyof GetQuery], Account | null>;
        /* Get multiple account records */
        accounts: DeepCallable<GetQuery[keyof GetQuery], Accounts>;
        /* Get all current models */
        models: DeepCallable<GetQuery[keyof GetQuery], Models>;
    };
    declare const count: {
        /* Count multiple account records */
        accounts: DeepCallable<CountQuery[keyof CountQuery], number>;
    };
    declare const set: {
        /* Set a single account record */
        account: DeepCallable<SetQuery[keyof SetQuery], Account | null>;
        /* Set multiple account records */
        accounts: DeepCallable<SetQuery[keyof SetQuery], Accounts>;
    };
    declare const add: {
        /* Add a single account record */
        account: DeepCallable<AddQuery[keyof AddQuery], Account | null>;
    };
    declare const remove: {
        /* Remove a single account record */
        account: DeepCallable<RemoveQuery[keyof RemoveQuery], Account | null>;
        /* Remove multiple account records */
        accounts: DeepCallable<RemoveQuery[keyof RemoveQuery], Accounts>;
    };
    declare const createSyntaxFactory: (options: QueryHandlerOptions | (() => QueryHandlerOptions)) => {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof create;
        alter: typeof alter;
        drop: typeof drop;
        batch: typeof batch;
        sql: typeof sql;
        sqlBatch: typeof sqlBatch;
    };
    export default function (options: QueryHandlerOptions | (() => QueryHandlerOptions)): {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof create;
        alter: typeof alter;
        drop: typeof drop;
        batch: typeof batch;
        sql: typeof sql;
        sqlBatch: typeof sqlBatch;
    };
}
"
`;

exports[`generate with no models 1`] = `
"import type { AddQuery, CountQuery, GetQuery, RemoveQuery, SetQuery } from "@ronin/compiler";
import type { DeepCallable, ResultRecord } from "@ronin/syntax/queries";
import type { QueryHandlerOptions } from "ronin/types";
declare module "ronin" {
    declare const get: {
        /* Get all current models */
        models: DeepCallable<GetQuery[keyof GetQuery], Models>;
    };
    declare const count: {};
    declare const set: {};
    declare const add: {};
    declare const remove: {};
    declare const createSyntaxFactory: (options: QueryHandlerOptions | (() => QueryHandlerOptions)) => {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof create;
        alter: typeof alter;
        drop: typeof drop;
        batch: typeof batch;
        sql: typeof sql;
        sqlBatch: typeof sqlBatch;
    };
    export default function (options: QueryHandlerOptions | (() => QueryHandlerOptions)): {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof create;
        alter: typeof alter;
        drop: typeof drop;
        batch: typeof batch;
        sql: typeof sql;
        sqlBatch: typeof sqlBatch;
    };
}
"
`;
